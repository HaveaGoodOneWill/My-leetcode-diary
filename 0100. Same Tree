class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(q == null && p == null) {
            return true;
        }
        if(q == null || p == null) {
            return false;
        }
        if(q.val != p.val) {
            return false;
        }
        return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }
}
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) {
            return true;
        }
        if(p == null || q == null) {
            return false;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(p);
        queue.add(q);
        while(!queue.isEmpty()) {         
            TreeNode left = queue.remove();
            TreeNode right = queue.remove();
            if(left == null && right == null) continue;
            if(left == null || right == null||left.val != right.val) {
                return false;
            }
                queue.add(left.left);
                queue.add(right.left);
                queue.add(left.right);
                queue.add(right.right);
        }
        return true;
    }
}
