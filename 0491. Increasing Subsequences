class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        if (nums.length == 0) {
            return res;
        }
        
        backtrack(nums,0);
        return res;
    }
    List<Integer> temp = new ArrayList<>();
    public void backtrack(int[] nums, int n) {
        if(temp.size() > 1) {
            res.add(new ArrayList<>(temp));
        }
       int[] used = new int[201];
        for (int i = n; i < nums.length; i++) {
            if (ï¼ˆ!temp.isEmpty() && nums[i] < temp.get(temp.size() - 1) || (used[nums[i] + 100] == 1)) continue;
            used[nums[i] + 100] = 1;
            temp.add(nums[i]);
            backtrack(nums, i + 1);
            temp.remove(temp.size() - 1);
    }
}
}
