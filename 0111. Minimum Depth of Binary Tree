class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        int de = 0;
        queue.add(root);
        while(!queue.isEmpty()) {
            de++;
            int size = queue.size();
            for(int i = 0; i < size; i++) {
            TreeNode x = queue.remove();
            if(x.left == null && x.right == null) {
                return de;
            }
            if(x.left != null) {
                queue.add(x.left);
            }
            if(x.right != null) {
                queue.add(x.right);
            }
            }   
        }
        return de;
    }
}
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        if(root.left == null && root.right !=null) {
            return 1 + right;
        }
        if(root.left != null && root.right ==null) {
            return 1 + left;
        }
        return 1 + Math.min(left,right);
    }
}
