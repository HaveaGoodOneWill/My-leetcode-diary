class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int size = nums.length-k+1;
        int[] res = new int[size];
        int num = 0;
        MyQueue myque = new MyQueue();
        for(int i = 0; i < k; i++){
            myque.push(nums[i]);
        }
        res[num++] = myque.peek();
        for(int i = k; i < nums.length; i++) {
            myque.pop(nums[i-k]);
            myque.push(nums[i]);
            res[num++] = myque.peek();
        }
        return res;
    }
    
}
class MyQueue {
        Deque<Integer> queue = new LinkedList<Integer>();  
        public void pop(int val) {
            if(!queue.isEmpty()&&queue.peek()==val) {
                queue.poll();
            }
        }
        public void push(int val) {
            while(!queue.isEmpty()&&val > queue.getLast()) {
                    queue.removeLast();
            }
            queue.addLast(val);
        }
        public int peek() {
            return queue.peek();
        }
    }
