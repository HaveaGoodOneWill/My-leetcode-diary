class Solution {
    public int mySqrt(int x) {
        int l = 0;
        int r = x;
        int ans = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            }
            else if ((long) mid * mid > x) {
                r = mid - 1;
            }
        }
        return ans;
    }
}
class Solution {
    public int mySqrt(int x) {
        int left = 0;
        int right = x;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if ((long) mid * mid == x) {
                return mid;
            }
            else if ((long) mid * mid > x){
                right = mid - 1;
            }
            else if ((long) mid * mid < x){
                left = mid + 1;
            }
        }
        return right;
    }
}
if you find, just return the mid. What if you do not find? If you do not find the target, than left > right,
and nums[right] * nums[right] < target < nums[left] * nums[left], what you need is the right.
