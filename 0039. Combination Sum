class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if (candidates.length == 1 && target != candidates[0]) {
            return res;
        }
        backtrack(candidates, target, 0,0);
        return res;
    }
    List<Integer> temp = new ArrayList<>();
    public void backtrack(int[] candidates, int target, int sum, int ind) {
        if (sum > target) {
            return;
        }
        if (sum == target) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i = ind; i < candidates.length; i++) {
            temp.add(candidates[i]);
            sum = sum + candidates[i];
            backtrack(candidates, target, sum, i);
            temp.remove(temp.size() - 1);
            sum = sum - candidates[i];
        }
    }
}
