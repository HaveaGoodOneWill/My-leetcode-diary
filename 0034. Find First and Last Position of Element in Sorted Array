class Solution {
    public int[] searchRange(int[] nums, int target) {
       int right = helperright(nums,target);
       int left = helperleft(nums,target);
       return new int[]{left,right};
    }
    public int helperright(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int rightbound = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (target >= nums[mid]) {
                left = mid + 1;
            }
            else {
                right = mid -1;
            }
            if (target == nums[mid]) {
                rightbound = mid;
            }
        }
        return rightbound;
    }
    public int helperleft(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int leftbound = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (target <= nums[mid]) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
            if (target == nums[mid]) {
                leftbound = mid;
            }
        }
        return leftbound;
    }
}
For find the right, we should let the left boundary keep going to right, so even we find the target at some point, we should keep going right,
then for each while, we write down the mid. The last mid is what we want.
Same thing for the find the left.
