class Solution {
    public int[] searchRange(int[] nums, int target) {
       int right = helperright(nums,target);
       int left = helperleft(nums,target);
       return new int[]{left,right};
    }
    public int helperright(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int rightbound = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (target == nums[mid]) {
                rightbound = mid;
            }
            if (target >= nums[mid]) {
                left = mid + 1;
            }
            else {
                right = mid -1;
            }
        }
        return rightbound;
    }
    public int helperleft(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int leftbound = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (target == nums[mid]) {
                leftbound = mid;
            }
            if (target <= nums[mid]) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }
        return leftbound;
    }
}
