class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        List<Integer> path = new ArrayList<>();
        traversal(root, path, res);
        return res;
    }
    private void traversal(TreeNode root, List<Integer> path, List<String> res) {
        path.add(root.val);
        if(root.left == null && root.right == null) {
            StringBuilder sb = new StringBuilder();
            int size = path.size();
            for (int i = 0; i < size - 1; i++) {
                sb.append(path.get(i)).append("->");
            }
            sb.append(path.get(size - 1));
            res.add(sb.toString());
            return;
        }
        if (root.left != null) {
            traversal(root.left, path, res);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            traversal(root.right, path, res);
            path.remove(path.size() - 1);
        }
    }
}
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<String> queue1 = new LinkedList<>();
        queue.add(root);
        queue1.add(Integer.toString(root.val));
        while (!queue.isEmpty()) {
            TreeNode x = queue.remove();
            String y = queue1.remove();
            if (x.left == null && x.right == null) {
                res.add(0,y);
            }
            if (x.left != null) {
                queue.add(x.left);
                queue1.add(y + "->"+ x.left.val);
            }
             if (x.right != null) {
                queue.add(x.right);
                queue1.add(y + "->"+ x.right.val);
            }
        }
        return res;
    }
}
